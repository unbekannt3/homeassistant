blueprint:
  name: Heizungsthermostat Steuerung mit mehreren Fenstern
  description: >
    Automatische Thermostatregelung mit Zeitplan, Presence Detection und
    optionaler Fensterkontrolle
  source_url: https://github.com/unbekannt3/homeassistant/blob/main/blueprints/automation/unbekannt3/heizungssteuerung_multifenster.yaml
  domain: automation
  input:
    heating:
      name: Thermostat Modus Select
      description: Thermostat Modus Select zur Auswahl von Heizen o. Eco Modus
      selector:
        entity:
          filter:
            - domain: select
          multiple: false
    eco_thermostat_number:
      name: Eco Temperatur Thermostat
      description: ECO Modus Temperatursensor vom Thermostat
      selector:
        entity:
          filter:
            - domain: number
          multiple: false
    comf_thermostat_number:
      name: Komfort Temperatur Thermostat
      description: Komfort Modus Temperatursensor vom Thermostat
      selector:
        entity:
          filter:
            - domain: number
          multiple: false
    min_temp:
      name: Eco Temperatur
      description: Bei Abwesenheit wird die Eco Temperatur gesetzt.
      selector:
        entity:
          filter:
            - domain: input_number
          multiple: false
    set_temp:
      name: Heizen Temperatur
      description: Wenn jemand Zuhause ist wird die Heizen Temperatur gesetzt.
      selector:
        entity:
          filter:
            - domain: input_number
          multiple: false
    persons:
      name: Personen
      description: Auswahl an Personen Trackern für die Abwesenheit- / Zuhause Kontrolle
      selector:
        entity:
          filter:
            - domain: person
          multiple: true
    scheduler:
      name: Zeitvorlage
      description: Zeitvorlage wann die Heizen Temperatur gesetzt werden kann, wenn jemand Zuhause ist.
      selector:
        entity:
          filter:
            - domain: schedule
          multiple: false
    windows:
      name: Fenster (optional)
      description: Fenster, die die Heizung ausschalten, wenn sie geöffnet sind.
      default: []
      selector:
        entity:
          filter:
            - domain: binary_sensor
          multiple: true
    window_reaction_time:
      name: Fenster Reaktionszeit
      description: Dauer in Sekunden, die ein Fenster geöffnet sein muss, bevor die Heizung ausgeschaltet wird.
      default: 30
      selector:
        number:
          min: 0.0
          max: 180.0
          step: 1.0
          mode: box
    winter_mode:
      name: Wintermodus
      description: Nur wenn dieser Schalter aktiv ist, darf geheizt werden.
      default: none
      selector:
        entity:
          filter:
            - domain: input_boolean
          multiple: false
    party_mode:
      name: Party mode (optional)
      description: Überschreibt die Zeitvorlage und den Wintermodus. Wenn aktiv wird dauerhaft geheizt.
      default: none
      selector:
        entity:
          filter:
            - domain: input_boolean
          multiple: false
variables:
  comf_thermostat_number: !input comf_thermostat_number
  eco_thermostat_number: !input eco_thermostat_number
  set_temp: !input set_temp
  min_temp: !input min_temp
  scheduler: !input scheduler
  windows: !input windows
  winter_mode: !input winter_mode
  party_mode: !input party_mode
  persons: !input persons
  party_state: '{{ party_mode != none and is_state(party_mode, "on") }}'
  winter_state: '{{ winter_mode != none and is_state(winter_mode, "on") }}'
  # window_state ist true, wenn alle Fenster geschlossen sind
  window_state: >
    {% if windows | length > 0 %}
      {{ (expand(windows) | selectattr('state', 'eq', 'on') | list | count) == 0 }}
    {% else %}
      true
    {% endif %}
  persons_home_count: >
    {{ expand(persons) | selectattr('state', 'eq', 'home') | list | count }}
  mode: "{{ 'Heizen' if party_state else ('Heizen' if persons_home_count > 0 and winter_state and window_state and is_state(scheduler, 'on') else 'Eco') }}"

trigger_variables:
  window_t: !input windows
  winter_mode_t: !input winter_mode
  party_mode_t: !input party_mode
trigger:
  - trigger: homeassistant
    event: start
  - trigger: event
    event_type: automation_reloaded
  - trigger: state
    entity_id: !input scheduler
  - trigger: state
    entity_id: !input set_temp
    for:
      seconds: 2
  - trigger: state
    entity_id: !input persons
  - trigger: template
    value_template: >
      {{ windows != none and expand(windows) | selectattr('state', 'eq', 'on') | list | count > 0 }}
    for:
      seconds: !input window_reaction_time
  - trigger: template
    value_template: >
      {{ windows != none and expand(windows) | selectattr('state', 'eq', 'off') | list | count == windows | length }}
    for:
      seconds: !input window_reaction_time
  - trigger: template
    value_template: >
      {{ winter_mode_t != none and is_state(winter_mode_t, "on") }}
    for:
      seconds: !input window_reaction_time
  - trigger: template
    value_template: >
      {{ winter_mode_t != none and is_state(winter_mode_t, "off") }}
    for:
      seconds: !input window_reaction_time
  - trigger: template
    value_template: >
      {{ party_mode_t != none and is_state(party_mode_t, "off") }}
    for:
      seconds: !input window_reaction_time
action:
  - action: select.select_option
    target:
      entity_id: !input heating
    data:
      option: "{{ mode }}"
  - action: number.set_value
    target:
      entity_id: !input comf_thermostat_number
    data:
      value: "{{ states(set_temp) }}"
  - action: number.set_value
    target:
      entity_id: !input eco_thermostat_number
    data:
      value: "{{ states(min_temp) }}"
mode: restart
