blueprint:
  name: Heizungsthermostat Steuerung
  description:
    Automatische Thermostatregelung mit Zeitplan, Presence Detection und
    optionaler Fensterkontrolle
  source_url: https://github.com/unbekannt3/homeassistant/blob/main/blueprints/automation/unbekannt3/heizungssteuerung.yaml
  domain: automation
  input:
    heating:
      name: Thermostat Modus Select
      description: Thermostat Modus Select zur Auswahl von Heizen o. Eco Modus
      selector:
        entity:
          filter:
            domain: select
          multiple: false
    eco_thermostat_number:
      name: Eco Temperatur Thermostat
      description: ECO Modus Temperatursensor vom Thermostat
      selector:
        entity:
          filter:
            domain: number
          multiple: false
    comf_thermostat_number:
      name: Komfort Temperatur Thermostat
      description: Komfort Modus Themperatursensor vom Thermostat
      selector:
        entity:
          filter:
            domain: number
          multiple: false
    min_temp:
      name: Eco Temperatur
      description: Bei Abwesenheit wird die Eco Temperatur gesetzt.
      selector:
        entity:
          filter:
            domain: input_number
          multiple: false
    set_temp:
      name: Heizen Temperatur
      description: Wenn jemand Zuhause ist wird die Heizen Temperatur gesetzt.
      selector:
        entity:
          filter:
            domain: input_number
          multiple: false
    persons:
      name: Personen
      description: Auswahl an Personen Trackern für die Abwesenheit- / Zuhause Kontrolle
      selector:
        entity:
          filter:
            domain: person
          multiple: true
    scheduler:
      name: Zeitvorlage
      description: Zeitvorlage wann die Heizen Temperatur gesetzt werden kann,
        wenn jemand Zuhause ist.
      selector:
        entity:
          filter:
            domain: schedule
          multiple: false
    window:
      name: Window (optional)
      description: Window that turns off the thermostats if it is open.
      default:
      selector:
        entity:
          filter:
            domain: binary_sensor
          multiple: false
    window_reaction_time:
      name: Window reaction time
      description:
        Duration that the window must be open for the thermostats to be
        turned off.
      default: 10
      selector:
        number:
          min: 0.0
          max: 60.0
          step: 1.0
          mode: slider
    winter_mode:
      name: Wintermodus
      description: Nur wenn wieder Schalter aktiv ist darf Geheizt werden.
      default:
      selector:
        entity:
          filter:
            domain: input_boolean
          multiple: false
    party_mode:
      name: Party mode (optional)
      description: Überschreibt die Zeitvorlage und den Wintermodus. Wenn aktiv
        wird dauerhaft geheizt.
      default:
      selector:
        entity:
          filter:
            domain: input_boolean
          multiple: false
variables:
  comf_thermostat_number: !input comf_thermostat_number
  eco_thermostat_number: !input eco_thermostat_number
  set_temp: !input set_temp
  min_temp: !input min_temp
  scheduler: !input scheduler
  window: !input window
  winter_mode: !input winter_mode
  party_mode: !input party_mode
  persons: !input persons
  party_state: "{{ party_mode != none and is_state(party_mode, 'on') }}"
  winter_state: "{{ winter_mode != none and is_state(winter_mode, 'on') }}"
  window_state: "{{ window != none and is_state(window, 'on') }}"
  persons_home_count: "{{ expand(persons) | selectattr('state', 'eq', 'home')
    | list | count }}"
  mode: "{% if persons_home_count | int > 0 and (winter_state == true or
    party_state == true) %}\n  {% if window_state == false and states(scheduler) == 'on'
    %}Heizen{% else %}Eco{% endif %}\n{% elif persons_home_count | int <= 0 and
    (winter_state == true or party_state == true) %}Eco\n{% else %}
    Frostschutz{% endif %}\n"

trigger_variables:
  window_t: !input window
  winter_mode_t: !input winter_mode
  party_mode_t: !input party_mode
trigger:
  - platform: homeassistant
    event: start
  - platform: event
    event_type: automation_reloaded
  - platform: state
    entity_id: !input scheduler
  - platform: state
    entity_id: !input set_temp
    for:
      seconds: 2
  - platform: state
    entity_id: !input persons
  - platform: template
    value_template: "{{ window_t != none and is_state(window_t, 'on') }}"
    for:
      seconds: !input window_reaction_time
  - platform: template
    value_template: "{{ window_t != none and is_state(window_t, 'off') }}"
    for:
      seconds: !input window_reaction_time
  - platform: template
    value_template: "{{ winter_mode_t != none and is_state(winter_mode_t, 'on') }}"
    for:
      seconds: !input window_reaction_time
  - platform: template
    value_template: "{{ winter_mode_t != none and is_state(winter_mode_t, 'off') }}"
    for:
      seconds: !input window_reaction_time
  - platform: template
    value_template: "{{ party_mode_t != none and is_state(party_mode_t, 'off') }}"
    for:
      seconds: !input window_reaction_time
  - platform: template
    value_template: "{{ party_mode_t != none and is_state(party_mode_t, 'off') }}"
    for:
      seconds: !input window_reaction_time
action:
  - service: select.select_option
    target:
      entity_id: !input heating
    data:
      option: "{{ mode }}"
  - service: number.set_value
    target:
      entity_id: !input comf_thermostat_number
    data:
      value: "{{ states(set_temp) }}"
  - service: number.set_value
    target:
      entity_id: !input eco_thermostat_number
    data:
      value: "{{ states(min_temp) }}"
mode: restart
